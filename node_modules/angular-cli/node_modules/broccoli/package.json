{
  "name": "broccoli",
  "description": "Fast client-side asset builder",
  "version": "1.0.0-beta.7",
  "author": {
    "name": "Jo Liss",
    "email": "joliss42@gmail.com"
  },
  "main": "lib/index.js",
  "license": "MIT",
  "keywords": [
    "builder",
    "build",
    "frontend",
    "browser",
    "asset",
    "pipeline"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/broccolijs/broccoli.git"
  },
  "homepage": "https://github.com/broccolijs/broccoli",
  "dependencies": {
    "broccoli-kitchen-sink-helpers": "^0.3.0",
    "broccoli-slow-trees": "^2.0.0",
    "broccoli-source": "^1.1.0",
    "commander": "^2.5.0",
    "connect": "^3.3.3",
    "copy-dereference": "^1.0.0",
    "findup-sync": "^0.2.1",
    "handlebars": "^4.0.4",
    "mime": "^1.2.11",
    "rimraf": "^2.4.3",
    "rsvp": "^3.0.17",
    "tmp": "0.0.28",
    "underscore.string": "^3.2.2"
  },
  "devDependencies": {
    "broccoli-plugin": "^1.2.0",
    "chai": "^3.3.0",
    "chai-as-promised": "^5.1.0",
    "fixturify": "^0.2.0",
    "mocha": "^2.3.3",
    "mocha-jshint": "^2.2.5",
    "multidep": "^2.0.0",
    "sinon": "^1.17.1",
    "sinon-chai": "^2.8.0",
    "symlink-or-copy": "^1.0.1"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "pretest": "multidep test/multidep.json",
    "test": "mocha"
  },
  "readme": "# Broccoli\n\n<img src=\"logo/broccoli-logo.generated.png\" align=\"right\" height=\"150\">\n\n[![Build Status](https://travis-ci.org/broccolijs/broccoli.svg?branch=master)](https://travis-ci.org/broccolijs/broccoli)\n[![Build status](https://ci.appveyor.com/api/projects/status/jd3ts93gryjeqclf/branch/master?svg=true)](https://ci.appveyor.com/project/joliss/broccoli/branch/master)\n\nA fast, reliable asset pipeline, supporting constant-time rebuilds and compact\nbuild definitions. Comparable to the Rails asset pipeline in scope, though it\nruns on Node and is backend-agnostic. For background and architecture, see the\n[introductory blog post](http://www.solitr.com/blog/2014/02/broccoli-first-release/).\n\nFor the command line interface, see\n[broccoli-cli](https://github.com/broccolijs/broccoli-cli).\n\n**This is 0.x beta software.**\n\nWindows support is still spotty. Our biggest pain point is unreliable file\ndeletion (see [rimraf#72](https://github.com/isaacs/rimraf/issues/72)).\n\n## Installation\n\n```bash\nnpm install --save-dev broccoli\nnpm install --global broccoli-cli\n```\n\n## Brocfile.js\n\nA `Brocfile.js` file in the project root contains the build specification. It\nshould export a tree.\n\nA tree can be any string representing a directory path, like `'app'` or\n`'src'`. Or a tree can be an object conforming to the [Plugin API\nSpecification](#plugin-api-specification). A `Brocfile.js` will usually\ndirectly work with only directory paths, and then use the plugins in the\n[Plugins](#plugins) section to generate transformed trees.\n\nThe following simple `Brocfile.js` would export the `app/` subdirectory as a\ntree:\n\n```js\nmodule.exports = 'app'\n```\n\nWith that Brocfile, the build result would equal the contents of the `app`\ntree in your project folder. For example, say your project contains these\nfiles:\n\n    app\n    ├─ main.js\n    └─ helper.js\n    Brocfile.js\n    package.json\n    …\n\nRunning `broccoli build the-output` (a command provided by\n[broccoli-cli](https://github.com/broccolijs/broccoli-cli)) would generate\nthe following folder within your project folder:\n\n    the-output\n    ├─ main.js\n    └─ helper.js\n\n### Using plugins in a `Brocfile.js`\n\nThe following `Brocfile.js` exports the `app/` subdirectory as `appkit/`:\n\n```js\nvar Funnel = require('broccoli-funnel')\n\nmodule.exports = new Funnel('app', {\n  destDir: 'appkit'\n})\n```\n\nThat example uses the plugin\n[`broccoli-funnel`](https://www.npmjs.com/package/broccoli-funnel).\nIn order for the `require` call to work, you must first put the plugin in\nyour `devDependencies` and install it, with\n\n    npm install --save-dev broccoli-funnel\n\nWith the above `Brocfile.js` and the file tree from the previous example,\nrunning `broccoli build the-output` would generate the following folder:\n\n    the-output\n    └─ appkit\n       ├─ main.js\n       └─ helper.js\n\n### A larger example\n\nYou can see a full-featured `Brocfile.js` in\n[broccoli-sample-app](https://github.com/broccolijs/broccoli-sample-app/blob/master/Brocfile.js).\n\n## Plugins\n\nYou can find plugins under the [broccoli-plugin keyword](https://www.npmjs.org/browse/keyword/broccoli-plugin) on npm.\n\n### Running Broccoli, Directly or Through Other Tools\n\n* [broccoli-timepiece](https://github.com/rjackson/broccoli-timepiece)\n* [grunt-broccoli](https://github.com/quandl/grunt-broccoli)\n* [grunt-broccoli-build](https://github.com/ericf/grunt-broccoli-build)\n\n### Helpers\n\nShared code for writing plugins.\n\n* [broccoli-caching-writer](https://github.com/rjackson/broccoli-caching-writer)\n* [broccoli-filter](https://github.com/broccolijs/broccoli-filter)\n* [broccoli-writer](https://github.com/broccolijs/broccoli-writer)\n* [node-quick-temp](https://github.com/joliss/node-quick-temp)\n\n## Plugin API Specification\n\n*This section needs to be updated. For now, see\n[docs/broccoli-1-0-plugin-api.md](docs/broccoli-1-0-plugin-api.md) and the\n[broccoli-plugin README](https://github.com/broccolijs/broccoli-plugin).*\n\nBroccoli defines a single plugin API: a tree. A tree object represents a tree\n(directory hierarchy) of files that will be regenerated on each build.\n\nBy convention, plugins will export a function that takes one or more input\ntrees, and returns an output tree object. Usually your plugin will be\nimplemented as a class representing a tree, but it is recommended to make the\n`new` operator optional\n([example](https://github.com/joliss/broccoli-coffee/blob/a55b3a6677f6d9da83334e9c916ae5e57895d1a6/index.js#L8)).\n\nA tree object must supply two methods that will be called by Broccoli:\n\n### `tree.read(readTree)`\n\nThe `.read` method must return a path or a promise for a path, containing the\ntree contents.\n\nIt receives a `readTree` function argument from Broccoli. If `.read` needs to\nread other trees, it must not call `otherTree.read` directly. Instead, it must\ncall `readTree(otherTree)`, which returns a promise for the path containing\n`otherTree`'s contents. It must not call `readTree` again until the promise\nhas resolved; that is, it cannot call `readTree` on multiple trees in\nparallel.\n\nBroccoli will call the `.read` method repeatedly to rebuild the tree, but at\nmost once per rebuild; that is, if a tree is used multiple times in a build\ndefinition, Broccoli will reuse the path returned instead of calling `.read`\nagain.\n\nThe `.read` method is responsible for creating a new temporary directory to\nstore the tree contents in. Subsequent invocations of `.read` should remove\ntemporary directories created in previous invocations.\n\n### `tree.cleanup()`\n\nFor every tree whose `.read` method was called one or more times, the\n`.cleanup` method will be called exactly once. No further `.read` calls will\nfollow `.cleanup`. The `.cleanup` method should remove all temporary\ndirectories created by `.read`.\n\n### Debugging\n\n\n#### Errors\n\nWhen it is known which file caused a given error, plugin authors can make errors\neasier to track down by setting the `.file` property on the generated error.\n\nThis `.file` property is used by both the console logging, and the server middleware\nto display more helpful error messages.\n\n#### Descriptive Naming\n\nAs of 0.11 Broccoli prints a log of any trees that took a significant amount of the total\nbuild time to assist in finding which trees are consuming the largest build times.\n\nTo determine the name to be printed Broccoli will first look for a `.description`\nproperty on the plugin instance then fall back to using the plugin constructor's name.\n\n## Security\n\n* Do not run `broccoli serve` on a production server. While this is\n  theoretically safe, it exposes a needlessly large amount of attack surface\n  just for serving static assets. Instead, use `broccoli build` to precompile\n  your assets, and serve the static files from a web server of your choice.\n\n## Get Help\n\n* IRC: `#broccolijs` on Freenode. Ask your question and stick around for a few\n  hours. Someone will see your message eventually.\n* Twitter: mention @jo_liss with your question\n* GitHub: Open an issue on a specific plugin repository, or on this\n  repository for general questions.\n\n## License\n\nBroccoli was originally written by [Jo Liss](http://www.solitr.com/) and is\nlicensed under the [MIT license](LICENSE).\n\nThe Broccoli logo was created by [Samantha Penner\n(Miric)](http://mirics.deviantart.com/) and is licensed under [CC0\n1.0](https://creativecommons.org/publicdomain/zero/1.0/).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/broccolijs/broccoli/issues"
  },
  "_id": "broccoli@1.0.0-beta.7",
  "_shasum": "49dbca6cc41c09f1c710778e5524db38a1fae8da",
  "_resolved": "https://registry.npmjs.org/broccoli/-/broccoli-1.0.0-beta.7.tgz",
  "_from": "https://registry.npmjs.org/broccoli/-/broccoli-1.0.0-beta.7.tgz"
}
