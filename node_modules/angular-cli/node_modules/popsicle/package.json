{
  "name": "popsicle",
  "version": "5.0.1",
  "description": "Simple HTTP requests for node and the browser",
  "main": "dist/common.js",
  "files": [
    "dist/",
    "typings.json",
    "LICENSE",
    "logo.svg"
  ],
  "browser": {
    "buffer": false,
    "form-data": "./dist/browser/form-data.js",
    "tough-cookie": "./dist/browser/tough-cookie.js",
    "./dist/index.js": "./dist/browser.js",
    "./dist/plugins/index.js": "./dist/plugins/browser.js"
  },
  "scripts": {
    "lint": "# TODO",
    "check-size": "browserify . -s popsicle --external bluebird > popsicle.js && du -h popsicle.js",
    "build": "rm -rf dist/ && tsc && npm run check-size",
    "test-spec": "npm run test-server-open && HTTPS_PORT=7358 PORT=7357 node dist/test/index.js | tap-spec; EXIT=$?; npm run test-server-close; exit $EXIT",
    "test-cov": "HTTPS_PORT=7358 PORT=7357 istanbul cover --print none dist/test/index.js | tap-spec",
    "test-browser": "HTTPS_PORT=7358 PORT=7357 browserify -d -t envify dist/test/index.js | tape-run --render tap-spec",
    "test-server-open": "PORT=7357 node scripts/server.js & echo $! > server.pid; HTTPS_PORT=7358 node scripts/https-server.js & echo $! > https-server.pid",
    "test-server-close": "if [ -f server.pid ]; then kill -9 $(cat server.pid); rm server.pid; fi; if [ -f https-server.pid ]; then kill -9 $(cat https-server.pid); rm https-server.pid; fi",
    "test": "npm run lint && npm run build && npm run test-server-open && npm run test-cov && npm run test-browser; EXIT=$?; npm run test-server-close; exit $EXIT",
    "prepublish": "typings install && npm run build"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/blakeembrey/popsicle.git"
  },
  "keywords": [
    "request",
    "ajax",
    "http",
    "node",
    "browser",
    "promise",
    "agent"
  ],
  "author": {
    "name": "Blake Embrey",
    "email": "hello@blakeembrey.com",
    "url": "http://blakeembrey.me"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/blakeembrey/popsicle/issues"
  },
  "homepage": "https://github.com/blakeembrey/popsicle",
  "devDependencies": {
    "blue-tape": "^0.2.0",
    "bluebird": "^3.0.5",
    "body-parser": "^1.9.2",
    "browserify": "^13.0.0",
    "envify": "^3.4.0",
    "express": "^4.10.2",
    "istanbul": "^0.4.0",
    "pre-commit": "^1.0.10",
    "tap-spec": "^4.1.1",
    "tape-run": "2.1.0",
    "typescript": "^1.7.3",
    "typings": "^0.6.7"
  },
  "dependencies": {
    "any-promise": "^1.0.0",
    "arrify": "^1.0.0",
    "concat-stream": "^1.4.7",
    "form-data": "^0.2.0",
    "make-error-cause": "^1.0.1",
    "methods": "^1.1.1",
    "tough-cookie": "^2.0.0",
    "xtend": "^4.0.0"
  },
  "readme": "# ![Popsicle](https://cdn.rawgit.com/blakeembrey/popsicle/master/logo.svg)\n\n[![NPM version][npm-image]][npm-url]\n[![NPM downloads][downloads-image]][downloads-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n\n**Popsicle** is the easiest way to make HTTP requests - offering a consistent, intuitive and light-weight API that works on node and the browser.\n\n```js\npopsicle.get('/users.json')\n  .then(function (res) {\n    console.log(res.status) //=> 200\n    console.log(res.body) //=> { ... }\n    console.log(res.headers) //=> { ... }\n  })\n```\n\n## Installation\n\n```\nnpm install popsicle --save\n```\n\n## Usage\n\n```js\nvar popsicle = require('popsicle')\n\npopsicle.request({\n  method: 'POST',\n  url: 'http://example.com/api/users',\n  body: {\n    username: 'blakeembrey',\n    password: 'hunter2'\n  },\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n})\n  .then(function (res) {\n    console.log(res.status) // => 200\n    console.log(res.body) //=> { ... }\n    console.log(res.get('Content-Type')) //=> 'application/json'\n  })\n```\n\n**Popsicle** is ES6-ready, aliasing `default` to the default export. Try using `import popsicle from 'popsicle'` or import specific methods using `import { get, defaults } from 'popsicle'`. Exports:\n\n* **request(options)** Default request handler - `defaults({})`\n* **get(options)** Alias of `request` (GET is the default method)\n* **del(options)** Alias of `defaults({ method: 'delete' })`\n* **head(options)** Alias of `defaults({ method: 'head' })`\n* **patch(options)** Alias of `defaults({ method: 'patch' })`\n* **post(options)** Alias of `defaults({ method: 'post' })`\n* **put(options)** Alias of `defaults({ method: 'put' })`\n* **default(options)** The ES6 default import, alias of `request`\n* **defaults(options)** Create a new Popsicle instance using `defaults`\n* **form(obj?)** Cross-platform form data object\n* **plugins** Exposes the default plugins (Object)\n* **jar(store?)** Create a cookie jar instance for Node.js\n* **transport** Default transportation layer (Object)\n* **browser** (boolean)\n* **Request(options)** Constructor for the `Request` class\n* **Response(options)** Constructor for the `Response` class\n\n### Handling Requests\n\n* **url** The resource location\n* **method** The HTTP request method (default: `\"GET\"`)\n* **headers** An object with HTTP headers, header name to value (default: `{}`)\n* **query** An object or string to be appended to the URL as the query string\n* **body** An object, string, form data, stream (node), etc to pass with the request\n* **timeout** The number of milliseconds to wait before aborting the request (default: `Infinity`)\n* **use** An array of plugins to be used (default: see below)\n* **options** Raw options used by the transport layer (default: `{}`)\n* **transport** Override the transportation layer (default: `http.request/https.request` (node), `XMLHttpRequest` (brower))\n\n**Options using node transport**\n\nThe default plugins under node are `[stringify(), headers(), unzip(), concatStream('string'), parse()]`.\n\n* **jar** An instance of a cookie jar (`popsicle.jar()`) (default: `null`)\n* **agent** Custom HTTP pooling agent (default: [infinity-agent](https://github.com/floatdrop/infinity-agent))\n* **maxRedirects** Override the number of redirects allowed (default: `5`)\n* **rejectUnauthorized** Reject invalid SSL certificates (default: `true`)\n* **followRedirects** Disable redirects or use a function to accept `307`/`308` redirects (default: `true`)\n* **ca** A string, `Buffer` or array of strings or `Buffers` of trusted certificates in PEM format\n* **key** Private key to use for SSL (default: `null`)\n* **cert** Public x509 certificate to use (default: `null`)\n\n**Options using browser transport**\n\nThe default plugins in the browser are `[stringify(), headers(), parse()]`. Notice that unzipping and stream parsing is not available in browsers.\n\n* **withCredentials** Send cookies with CORS requests (default: `false`)\n* **responseType** Set the XHR `responseType` (default: `undefined`)\n\n#### Short-hand Methods\n\nCommon methods have a short hand exported (created using `defaults({ method })`).\n\n```js\npopsicle.get('http://example.com/api/users')\npopsicle.post('http://example.com/api/users')\npopsicle.put('http://example.com/api/users')\npopsicle.patch('http://example.com/api/users')\npopsicle.del('http://example.com/api/users')\n```\n\n#### Extending with Defaults\n\nCreate a new request function with defaults pre-populated. Handy for a common cookie jar or transport to be used.\n\n```js\nvar cookiePopsicle = popsicle.defaults({ options: { jar: popsicle.jar() } })\n```\n\n#### Automatically Stringify Request Body\n\nPopsicle can automatically serialize the request body using the built-in `stringify` plugin. If an object is supplied, it will automatically be stringified as JSON unless the `Content-Type` was set otherwise. If the `Content-Type` is `multipart/form-data` or `application/x-www-form-urlencoded`, it will be automatically serialized.\n\n```js\npopsicle.get({\n  url: 'http://example.com/api/users',\n  body: {\n    username: 'blakeembrey'\n  },\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n})\n```\n\n#### Multipart Request Bodies\n\nYou can manually create form data by calling `popsicle.form`. When you pass a form data instance as the body, it'll automatically set the correct `Content-Type` - complete with boundary.\n\n```js\nvar form = popsicle.form({\n  username: 'blakeembrey',\n  profileImage: fs.createReadStream('image.png')\n})\n\npopsicle.post({\n  url: '/users',\n  body: form\n})\n```\n\n#### Aborting Requests\n\nAll requests can be aborted before or during execution by calling `Request#abort`.\n\n```js\nvar request = popsicle.get('http://example.com')\n\nsetTimeout(function () {\n  request.abort()\n}, 100)\n\nrequest.catch(function (err) {\n  console.log(err) //=> { message: 'Request aborted', code: 'EABORTED' }\n})\n```\n\n#### Progress\n\nThe request object can be used to check progress at any time.\n\n* **request.uploadedBytes** Current upload size in bytes\n* **request.uploadLength** Total upload size in bytes\n* **request.uploaded** Total uploaded as a percentage\n* **request.downloadedBytes** Current download size in bytes\n* **request.downloadLength** Total download size in bytes\n* **request.downloaded** Total downloaded as a percentage\n* **request.completed** Total uploaded and downloaded as a percentage\n\nAll percentage properties (`request.uploaded`, `request.downloaded`, `request.completed`) are a number between `0` and `1`. Aborting the request will emit a progress event, if the request had started.\n\n```js\nvar request = popsicle.get('http://example.com')\n\nrequest.uploaded //=> 0\nrequest.downloaded //=> 0\n\nrequest.progress(function () {\n  console.log(request) //=> { uploaded: 1, downloaded: 0, completed: 0.5, aborted: false }\n})\n\nrequest.then(function (response) {\n  console.log(request.downloaded) //=> 1\n})\n```\n\n#### Default Plugins\n\nThe default plugins are exposed under `popsicle.plugins`, which allows you to mix, match and omit some plugins for maximum usability with any use-case.\n\n```js\n{\n  headers: [Function: headers],\n  stringify: [Function: stringify],\n  parse: [Function: parse],\n  unzip: [Function: unzip],\n  concatStream: [Function: concatStream],\n  defaults: [\n    [Function],\n    [Function],\n    [Function],\n    [Function],\n    [Function]\n  ]\n}\n```\n\n* **headers** Sets default headers, such as `User-Agent`, `Accept`, `Content-Length` (Highly recommended)\n* **stringify** Stringify object bodies into JSON/form data/url encoding (Recommended)\n* **parse** Automatically parse JSON and url encoding responses\n* **unzip** Automatically unzip response streams (Node only)\n* **concatStream** Buffer the stream using [concat-stream](https://www.npmjs.com/package/concat-stream) - accepts an \"encoding\" type (`string` (default), `buffer`, `array`, `uint8array`, `object`) (Node only)\n\n#### Cookie Jar (Node only)\n\nYou can create a reusable cookie jar instance for requests by calling `popsicle.jar`.\n\n```js\nvar jar = popsicle.jar()\n\npopsicle.request({\n  method: 'post',\n  url: '/users',\n  options: {\n    jar: jar\n  }\n})\n```\n\n### Handling Responses\n\nPromises and node-style callbacks are both supported.\n\n#### Promises\n\nPromises are the most expressive interface. Just chain using `Request#then` or `Request#catch` and continue.\n\n```js\npopsicle.get('/users')\n  .then(function (res) {\n    // Success!\n  })\n  .catch(function (err) {\n    // Something broke.\n  })\n```\n\nIf you live on the edge, try using it with generators (see [co](https://www.npmjs.com/package/co)) or ES7's `async`.\n\n```js\nco(function * () {\n  yield popsicle.get('/users')\n})\n\nasync function () {\n  await popsicle.get('/users')\n}\n```\n\n#### Callbacks\n\nFor tooling that still expects node-style callbacks, you can use `Request#exec`. This accepts a single function to call when the response is complete.\n\n```js\npopsicle.get('/users')\n  .exec(function (err, res) {\n    if (err) {\n      // Something broke.\n    }\n\n    // Success!\n  })\n```\n\n### Response Objects\n\nEvery Popsicle response will give a `Response` object on success. The object provides an intuitive interface for requesting common properties.\n\n* **status** The HTTP response status code\n* **body** An object (if parsed using a plugin), string (if using concat) or stream that is the HTTP response body\n* **headers** An object of lower-cased keys to header values\n* **url** The response URL after redirects (only supported in browser with `responseURL`)\n* **statusType()** Return an integer with the HTTP status type (E.g. `200 -> 2`)\n* **get(key)** Retrieve a HTTP header using a case-insensitive key\n* **name(key)** Retrieve the original HTTP header name using a case-insensitive key\n* **type()** Return the response type (E.g. `application/json`)\n\n### Error Handling\n\nAll response handling methods can return an error. Errors have a `popsicle` property set to the request object and a `code` string. The built-in codes are documented below, but custom errors can be created using `request.error(message, code, cause)`.\n\n* **EABORT** Request has been aborted by user\n* **EUNAVAILABLE** Unable to connect to the remote URL\n* **EINVALID** Request URL is invalid\n* **ETIMEOUT** Request has exceeded the allowed timeout\n* **ESTRINGIFY** Request body threw an error during stringification plugin\n* **EPARSE** Response body threw an error during parsing plugin\n* **EMAXREDIRECTS** Maximum number of redirects exceeded (Node only)\n* **EBODY** Unable to handle request body (Node only)\n* **EBLOCKED** The request was blocked (HTTPS -> HTTP) (Browsers only)\n* **ECSP** Request violates the documents Content Security Policy (Browsers only)\n\n### Plugins\n\nPlugins can be passed in as an array with the initial options (which overrides default plugins), or they can be used via the chained method `Request#use`.\n\n#### External Plugins\n\n* [Server](https://github.com/blakeembrey/popsicle-server) - Automatically mount a server on an available for the request (helpful for testing a la `supertest`)\n* [Status](https://github.com/blakeembrey/popsicle-status) - Reject responses on HTTP failure status codes\n* [Cache](https://github.com/blakeembrey/popsicle-cache) - Built-in cache handling of HTTP requests under node (customizable store, uses a filesystem store by default)\n* [No Cache](https://github.com/blakeembrey/popsicle-no-cache) - Prevent caching of HTTP requests in browsers\n* [Basic Auth](https://github.com/blakeembrey/popsicle-basic-auth) - Add a basic authentication header to each request\n* [Prefix](https://github.com/blakeembrey/popsicle-prefix) - Prefix all HTTP requests\n* [Resolve](https://github.com/blakeembrey/popsicle-resolve) - Resolve all HTTP requests against a base URL\n* [Constants](https://github.com/blakeembrey/popsicle-constants) - Replace constants in the URL string\n* [Limit](https://github.com/blakeembrey/popsicle-limit) - Transparently handle API rate limits by grouping requests\n* [Group](https://github.com/blakeembrey/popsicle-group) - Group requests and perform operations on them all at once\n* [Proxy Agent](https://github.com/blakeembrey/popsicle-proxy-agent) - Enable HTTP(s) proxying under node (with environment variable support)\n* [Retry](https://github.com/blakeembrey/popsicle-retry) - Retry a HTTP request on network error or server error\n\n#### Creating Plugins\n\nPlugins must be a function that accepts configuration and returns another function. For example, here's a basic URL prefix plugin.\n\n```js\nfunction prefix (url) {\n  return function (self) {\n    request.url = url + req.url\n  }\n}\n\npopsicle.request('/user')\n  .use(prefix('http://example.com'))\n  .then(function (response) {\n    console.log(response.url) //=> \"http://example.com/user\"\n  })\n```\n\nPopsicle also has a way modify the request and response lifecycle, if needed. Any registered function can return a promise to defer the request or response resolution. This makes plugins such as rate-limiting and response body concatenation possible.\n\n* **before(fn)** Register a function to run before the request is made\n* **after(fn)** Register a function to receive the response object\n* **always(fn)** Register a function that always runs on `resolve` or `reject`\n\n**Tip:** Use the lifecycle hooks (above) when you want re-use (E.g. re-use when the request is cloned or options re-used).\n\n#### Checking The Environment\n\n```js\npopsicle.browser //=> true\n```\n\n#### Transportation Layers\n\nCreating a custom transportation layer is just a matter creating an object with `open`, `abort` and `use` options set. The open method should set any request information required between called as `request.raw`. Abort must abort the current request instance, while `open` must **always** resolve the promise. You can set `use` to an empty array if no plugins should be used by default. However, it's recommended you keep `use` set to the defaults, or as close as possible using your transport layer.\n\n## TypeScript\n\nThis project is written using [TypeScript](https://github.com/Microsoft/TypeScript) and [typings](https://github.com/typings/typings). From version `1.3.1`, you can install the type definition using `typings`.\n\n```\ntypings install npm:popsicle --save\n```\n\n## Development\n\nInstall dependencies and run the test runners (node and Electron using Tape).\n\n```\nnpm install && npm test\n```\n\n## Related Projects\n\n* [Superagent](https://github.com/visionmedia/superagent) - HTTP requests for node and browsers\n* [Fetch](https://github.com/github/fetch) - Browser polyfill for promise-based HTTP requests\n* [Axios](https://github.com/mzabriskie/axios) - HTTP request API based on Angular's $http service\n\n## License\n\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/popsicle.svg?style=flat\n[npm-url]: https://npmjs.org/package/popsicle\n[downloads-image]: https://img.shields.io/npm/dm/popsicle.svg?style=flat\n[downloads-url]: https://npmjs.org/package/popsicle\n[travis-image]: https://img.shields.io/travis/blakeembrey/popsicle.svg?style=flat\n[travis-url]: https://travis-ci.org/blakeembrey/popsicle\n[coveralls-image]: https://img.shields.io/coveralls/blakeembrey/popsicle.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/blakeembrey/popsicle?branch=master\n",
  "readmeFilename": "README.md",
  "_id": "popsicle@5.0.1",
  "_shasum": "95606d99fe5c12c3c59aaaea2a2a26c2c501cac6",
  "_resolved": "https://registry.npmjs.org/popsicle/-/popsicle-5.0.1.tgz",
  "_from": "https://registry.npmjs.org/popsicle/-/popsicle-5.0.1.tgz"
}
