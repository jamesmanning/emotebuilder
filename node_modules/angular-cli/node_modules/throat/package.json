{
  "name": "throat",
  "version": "2.0.2",
  "description": "Throttle the parallelism of an asynchronous (promise returning) function / functions",
  "keywords": [
    "promise",
    "aplus",
    "then",
    "throttle",
    "concurrency",
    "parallelism",
    "limit"
  ],
  "dependencies": {},
  "devDependencies": {
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.5",
    "promise": "^6.1.0",
    "sauce-test": "^1.0.0",
    "test-result": "^2.0.0",
    "testit": "^2.0.2"
  },
  "scripts": {
    "test": "node test/index.js && node test/browser.js",
    "coverage": "istanbul cover test/index.js",
    "coveralls": "npm run coverage && cat ./coverage/lcov.info | coveralls"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ForbesLindesay/throat.git"
  },
  "author": {
    "name": "ForbesLindesay"
  },
  "license": "MIT",
  "readme": "# throat\n\nThrottle the parallelism of an asynchronous, promise returning, function / functions.  This has special utility when you set the concurrency to `1`.  That way you get a mutually exclusive lock.\n\n[![Build Status](https://img.shields.io/travis/ForbesLindesay/throat/master.svg)](https://travis-ci.org/ForbesLindesay/throat)\n[![Coverage Status](https://img.shields.io/coveralls/ForbesLindesay/throat/master.svg?style=flat)](https://coveralls.io/r/ForbesLindesay/throat?branch=master)\n[![Dependency Status](https://img.shields.io/gemnasium/ForbesLindesay/throat.svg)](https://gemnasium.com/ForbesLindesay/throat)\n[![NPM version](https://img.shields.io/npm/v/throat.svg)](http://badge.fury.io/js/throat)\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/throat.svg)](https://saucelabs.com/u/throat)\n\n## Installation\n\n    npm install throat\n\n## API\n\n### throat(concurrency)\n\nThis returns a function that acts a bit like a lock (exactly as a lock if concurrency is 1).\n\nExample, only 2 of the following functions will execute at any one time:\n\n```js\n// with polyfill or in iojs\nrequire('promise/polyfill')\nvar throat = require('throat')(2)\n// alternatively provide your own promise implementation\nvar throat = require('throat')(require('promise'))(2)\n\nvar resA = throat(function () {\n  //async stuff\n  return promise\n})\nvar resA = throat(function () {\n  //async stuff\n  return promise\n})\nvar resA = throat(function () {\n  //async stuff\n  return promise\n})\nvar resA = throat(function () {\n  //async stuff\n  return promise\n})\nvar resA = throat(function () {\n  //async stuff\n  return promise\n})\n```\n\n### throat(concurrency, worker)\n\nThis returns a function that is an exact copy of `worker` except that it will only execute up to `concurrency` times in parallel before further requests are queued:\n\n```js\n// with polyfill or in iojs\nrequire('promise/polyfill')\nvar throat = require('throat')\n// alternatively provide your own promise implementation\nvar throat = require('throat')(require('promise'))\n\nvar input = ['fileA.txt', 'fileB.txt', 'fileC.txt', 'fileD.txt']\nvar data = Promise.all(input.map(throat(2, function (fileName) {\n  return readFile(fileName)\n})))\n```\n\nOnly 2 files will be read at a time, sometimes limiting parallelism in this way can improve scalability.\n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ForbesLindesay/throat/issues"
  },
  "homepage": "https://github.com/ForbesLindesay/throat#readme",
  "_id": "throat@2.0.2",
  "_shasum": "a9fce808b69e133a632590780f342c30a6249b02",
  "_resolved": "https://registry.npmjs.org/throat/-/throat-2.0.2.tgz",
  "_from": "https://registry.npmjs.org/throat/-/throat-2.0.2.tgz"
}
