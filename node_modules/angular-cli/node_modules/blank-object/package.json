{
  "name": "blank-object",
  "version": "1.0.1",
  "description": "A faster alternative to Object.create(null)",
  "main": "index.js",
  "jsnext:main": "lib/index.js",
  "scripts": {
    "prepublish": "npm run build",
    "build": "rollup -f umd -n BlankObject -o index.js lib/index.js",
    "test": "node test"
  },
  "author": {
    "name": "Stefan Penner"
  },
  "license": "MIT",
  "devDependencies": {
    "rollup": "^0.15.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stefanpenner/blank-object.git"
  },
  "bugs": {
    "url": "https://github.com/stefanpenner/blank-object/issues"
  },
  "homepage": "https://github.com/stefanpenner/blank-object#readme",
  "readme": "# blank-object\n\nObject.create(null) turns out to be quite slow to alloc in v8, but instead if\nwe inherit from an ancestory with `proto = create(null)` we have nearly\nthe same functionallity but with dramatically faster alloc.\n\n```js\nvar BlankObject = require('blank-object');\n\nvar bo = new BlankObject();\n```\n\nEvery key is `undefined` but `\"constructor\" in blank` will return true.  This is designed for a presence check `map[key] !== undefined` since `in` is also slow like `hasOwnProperty`, `delete` and `Object.create`.\n\n```js\nfunction UNDEFINED() {}\nexport default class Map {\n  constructor() {\n    this.store = new BlankObject();\n  }\n\n  has(key) {\n    return this.store[key] !== undefined;\n  }\n\n  get(key) {\n    let val = this.store[key];\n    return val === UNDEFINED ? undefined : val;\n  }\n\n  set(key, val) {\n    this.store[key] = val === undefined ? UNDEFINED : val;\n  }\n}\n```\n",
  "readmeFilename": "README.md",
  "_id": "blank-object@1.0.1",
  "_shasum": "0b8ed796374b9556097820f85b7d8adf868e26f6",
  "_resolved": "https://registry.npmjs.org/blank-object/-/blank-object-1.0.1.tgz",
  "_from": "https://registry.npmjs.org/blank-object/-/blank-object-1.0.1.tgz"
}
