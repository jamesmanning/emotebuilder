{
  "name": "es6-template-strings",
  "version": "2.0.0",
  "description": "Compile and resolve template strings notation as specified in ES6",
  "author": {
    "name": "Mariusz Nowak",
    "email": "medyk@medikoo.com",
    "url": "http://www.medikoo.com/"
  },
  "keywords": [
    "es6",
    "template",
    "string",
    "literal",
    "literals",
    "format",
    "i18n",
    "quasiliterals",
    "multiline",
    "localization",
    "escape"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/medikoo/es6-template-strings.git"
  },
  "dependencies": {
    "es5-ext": "^0.10.7",
    "esniff": "1"
  },
  "devDependencies": {
    "tad": "^0.2.3",
    "xlint": "^0.2.2",
    "xlint-jslint-medikoo": "^0.1.4"
  },
  "scripts": {
    "lint": "node node_modules/xlint/bin/xlint --linter=node_modules/xlint-jslint-medikoo/index.js --no-cache --no-stream",
    "lint-console": "node node_modules/xlint/bin/xlint --linter=node_modules/xlint-jslint-medikoo/index.js --watch",
    "test": "node ./node_modules/tad/bin/tad"
  },
  "license": "MIT",
  "readme": "# es6-template-strings\n## Compile and resolve template strings notation as specified in ES6\n\n### Usage\n\n```javascript\n\nvar template = require('es6-template-strings');\n\n// Hello WORLD!\nconsole.log(template('Hello ${place.toUpperCase()}!', { place: \"World\" }));\n\n// You can reuse same templates:\nvar compile = require('es6-template-strings/compile')\n  , resolveToString = require('es6-template-strings/resolve-to-string')\n\n  , compiled = compile('Welcome to ${siteName}, you are visitor number ${visitorNumber}!');\n\n// Welcome to MySite, you are visitor number 137!\nconsole.log(resolveToString(compiled, { siteName: \"MySite\", visitorNumber: 137 }));\n\n// Welcome to OtherSite, you are visitor number 777!\nconsole.log(resolveToString(compiled, { siteName: \"OtherSite\", visitorNumber: 777 }));\n\n// You may prepare custom tag functions\nvar resolve = require('es6-template-strings/resolve');\n\nvar customTag = function (literals/*, â€¦substitutions*/) {\n\t// Process input and return result string\n};\n\n// Output template processed by customTag:\ncustomTag.apply(null, resolve(compiled, {/* context */}));\n```\n\n### Installation\n#### NPM\n\nIn your project path:\n\n\t$ npm install es6-template-strings\n\n##### Browser\n\nYou can easily bundle _es6-template-strings_ for browser with [modules-webmake](https://github.com/medikoo/modules-webmake)\n\n## Tests [![Build Status](https://travis-ci.org/medikoo/es6-template-strings.png)](https://travis-ci.org/medikoo/es6-template-strings)\n\n\t$ npm test\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/medikoo/es6-template-strings/issues"
  },
  "homepage": "https://github.com/medikoo/es6-template-strings#readme",
  "_id": "es6-template-strings@2.0.0",
  "_shasum": "35c80365efbbc1510fe7ca9f475967d546c169fc",
  "_resolved": "https://registry.npmjs.org/es6-template-strings/-/es6-template-strings-2.0.0.tgz",
  "_from": "https://registry.npmjs.org/es6-template-strings/-/es6-template-strings-2.0.0.tgz"
}
