{
  "name": "broccoli-caching-writer",
  "version": "2.2.1",
  "description": "Broccoli plugin that allows simple caching (while still allowing N:N) based on the input tree hash.",
  "main": "index.js",
  "author": {
    "name": "Robert Jackson"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ember-cli/broccoli-caching-writer.git"
  },
  "scripts": {
    "test": "mocha tests/",
    "test:debug": "mocha --no-timeouts debug tests/"
  },
  "keywords": [
    "broccoli-plugin",
    "javascript"
  ],
  "dependencies": {
    "broccoli-kitchen-sink-helpers": "^0.2.5",
    "broccoli-plugin": "1.1.0",
    "debug": "^2.1.1",
    "lodash.assign": "^3.2.0",
    "rimraf": "^2.2.8",
    "rsvp": "^3.0.17",
    "symlink-or-copy": "^1.0.0",
    "walk-sync": "^0.2.5"
  },
  "devDependencies": {
    "broccoli": "^0.13.0",
    "chai": "^3.2.0",
    "chai-as-promised": "^5.1.0",
    "mocha": "^2.2.5",
    "mocha-jshint": "~2.2.3"
  },
  "readme": "# Broccoli Caching Writer\n\n[![Build Status](https://travis-ci.org/ember-cli/broccoli-caching-writer.svg?branch=master)](https://travis-ci.org/ember-cli/broccoli-caching-writer)\n[![Build status][appveyor-badge]][appveyor-badge-url]\n\nDrop-in-replacement for\n[broccoli-writer](https://github.com/broccolijs/broccoli-writer) adding a thin\ncaching layer based on the computed hash of the input directory trees. If any\nfile in an input node has changed, the `build` method will be called,\notherwise (if input is the same) the results of the last `build` call will be\nused instead.\n\n## Example\n\n\n```js\nvar Plugin = require('broccoli-caching-writer');\n\nMyPlugin.prototype = Object.create(Plugin.prototype);\nMyPlugin.prototype.constructor = MyPlugin;\nfunction MyPlugin(inputNodes, options) {\n  options = options || {};\n  // options.inputFiles === array of globs, to consider for the cache key\n  Plugin.call(this, inputNodes, {\n    annotation: options.annotation\n  });\n}\n\nMyPlugin.prototype.build = function() {\n  // cache has been busted\n  // do anything, for example:\n  //   1. read from this.inputPaths\n  //   2. do something based on the result\n  //   3. and then, write to this.outputPath\n};\n```\n\n## Documentation\n\n### `new CachingWriter(inputNodes, options)`\n\nCall this base class constructor from your subclass constructor.\n\n* `inputNodes`: An array of input nodes.\n\n* `options`:\n\n    * `name`, `annotation`, `persistentOutput`: Same as\n      [broccoli-plugin](https://github.com/broccolijs/broccoli-plugin#new-plugininputnodes-options);\n      see there.\n\n    * `cacheInclude` (default: `[]`): An array of regular expressions that files and directories in an input node must pass (match at least one pattern) in order to be included in the cache hash for rebuilds. In other words, a whitelist of patterns that identify which files and/or directories can trigger a rebuild.\n\n    * `cacheExclude` (default: `[]`): An array of regular expressions that files and directories in an input node cannot pass in order to be included in the cache hash for rebuilds. In other words, a blacklist of patterns that identify which files and/or directories will never trigger a rebuild.\n\n        *Note, in the case when a file or directory matches both an include and exlude pattern, the exclude pattern wins*\n\n## `plugin.listFiles`\nlist files matched, helpful as it allows us avoid a second glob\n\n## `plugin.listEntries`\nlist entries (stat objects) of files matched, helpful when further FS information is required on rebuild.\n\n## ZOMG!!! TESTS?!?!!?\n\nI know, right?\n\nRunning the tests:\n\n```javascript\nnpm install\nnpm test\n```\n\n## License\n\nThis project is distributed under the MIT license.\n\n[appveyor-badge]: https://ci.appveyor.com/api/projects/status/ocfp2hqo7hyhyy80?svg=true\n[appveyor-badge-url]: https://ci.appveyor.com/project/embercli/broccoli-caching-writer/branch/master\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ember-cli/broccoli-caching-writer/issues"
  },
  "homepage": "https://github.com/ember-cli/broccoli-caching-writer#readme",
  "_id": "broccoli-caching-writer@2.2.1",
  "_shasum": "1b7d5e69bcdfe11b41c9f44bf69f8908298a2b91",
  "_resolved": "https://registry.npmjs.org/broccoli-caching-writer/-/broccoli-caching-writer-2.2.1.tgz",
  "_from": "https://registry.npmjs.org/broccoli-caching-writer/-/broccoli-caching-writer-2.2.1.tgz"
}
