{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { relative, resolve, dirname, sep } from 'path'\nimport { readFileSync, statSync } from 'fs'\nimport { EOL } from 'os'\nimport sourceMapSupport = require('source-map-support')\nimport extend = require('xtend')\nimport arrify = require('arrify')\nimport { BaseError } from 'make-error'\nimport * as tsconfig from 'tsconfig'\nimport * as TS from 'typescript'\n\nconst pkg = require('../package.json')\nconst oldHandlers: { [key: string]: any } = {}\n\n/**\n * Common TypeScript interfaces between versions.\n */\nexport interface TSCommon {\n  sys: typeof TS.sys\n  ScriptSnapshot: typeof TS.ScriptSnapshot\n  displayPartsToString: typeof TS.displayPartsToString\n  createLanguageService: typeof TS.createLanguageService\n  getDefaultLibFilePath: typeof TS.getDefaultLibFilePath\n  getPreEmitDiagnostics: typeof TS.getPreEmitDiagnostics\n  flattenDiagnosticMessageText: typeof TS.flattenDiagnosticMessageText\n  transpileModule: typeof TS.transpileModule\n\n  // TypeScript 1.5+, 1.7+ added `fileExists` parameter.\n  findConfigFile (path: string, fileExists?: (path: string) => boolean): string\n\n  // TypeScript 1.5+, 1.7+ added `readFile` parameter.\n  readConfigFile (path: string, readFile?: (path: string) => string): {\n    config?: any\n    error?: TS.Diagnostic\n  }\n\n  // TypeScript 1.7+.\n  parseJsonConfigFileContent? (\n    json: any,\n    host: any,\n    basePath: string,\n    existingOptions: any,\n    configFileName: string\n  ): any\n\n  // TypeScript 1.5+.\n  parseConfigFile? (json: any, host: any, basePath: string): any\n}\n\n/**\n * Export the current version.\n */\nexport const VERSION = pkg.version\n\n/**\n * Registration options.\n */\nexport interface Options {\n  fast?: boolean\n  compiler?: string\n  noProject?: boolean\n  project?: string\n  ignoreWarnings?: Array<number | string>\n  disableWarnings?: boolean\n  getFile?: (fileName: string) => string\n  getVersion?: (fileName: string) => string\n  getFileExists?: (fileName: string) => boolean\n  compilerOptions?: any\n}\n\n/**\n * Load TypeScript configuration.\n */\nfunction readConfig (options: Options, cwd: string, ts: TSCommon) {\n  const { project, noProject } = options\n  const fileName = noProject ? undefined : tsconfig.resolveSync(project || cwd)\n\n  const result = fileName ? ts.readConfigFile(fileName as string, ts.sys.readFile) : {\n    config: {\n      files: [],\n      compilerOptions: {}\n    }\n  }\n\n  if (result.error) {\n    throw new TSError([formatDiagnostic(result.error, ts, cwd)])\n  }\n\n  result.config.compilerOptions = extend(\n    {\n      target: 'es5',\n      module: 'commonjs'\n    },\n    result.config.compilerOptions,\n    options.compilerOptions,\n    {\n      sourceMap: false,\n      inlineSourceMap: true,\n      inlineSources: true,\n      declaration: false,\n      noEmit: false,\n      outDir: `tmp${Math.random().toString(36).substr(2)}`\n    }\n  )\n\n  // Delete options that *should not* be passed through.\n  delete result.config.compilerOptions.out\n  delete result.config.compilerOptions.outFile\n\n  // Resolve before getting `dirname` to work around Microsoft/TypeScript#2965\n  const basePath = fileName ? dirname(resolve(fileName)) : cwd\n\n  if (typeof ts.parseConfigFile === 'function') {\n    return ts.parseConfigFile(result.config, ts.sys, basePath)\n  }\n\n  return ts.parseJsonConfigFileContent(result.config, ts.sys, basePath, null, fileName as string)\n}\n\n/**\n * Track the project information.\n */\ninterface Project {\n  files: { [fileName: string]: boolean }\n  versions: { [fileName: string]: string }\n  version: number\n}\n\n/**\n * Information retrieved from type info check.\n */\nexport interface TypeInfo {\n  name: string\n  comment: string\n}\n\n/**\n * Default register options.\n */\nconst DEFAULT_OPTIONS: Options = {\n  getFile,\n  getVersion,\n  getFileExists,\n  disableWarnings: process.env.TS_NODE_DISABLE_WARNINGS,\n  compiler: process.env.TS_NODE_COMPILER,\n  project: process.env.TS_NODE_PROJECT || process.cwd(),\n  noProject: process.env.TS_NODE_NO_PROJECT,\n  ignoreWarnings: process.env.TS_NODE_IGNORE_WARNINGS,\n  fast: process.env.TS_NODE_FAST\n}\n\n/**\n * Register TypeScript compiler.\n */\nexport function register (opts?: Options) {\n  const cwd = process.cwd()\n  const options = extend(DEFAULT_OPTIONS, opts)\n  const project: Project = { version: 0, files: {}, versions: {} }\n\n  // Enable compiler overrides.\n  options.compiler = options.compiler || 'typescript'\n  options.ignoreWarnings = arrify(options.ignoreWarnings).map(Number)\n\n  // Parse compiler options as JSON.\n  options.compilerOptions = typeof options.compilerOptions === 'string' ?\n    JSON.parse(options.compilerOptions) :\n    options.compilerOptions\n\n  // Install source map support and read from cache.\n  sourceMapSupport.install({\n    environment: 'node',\n    retrieveFile (fileName: string) {\n      if (project.files[fileName]) {\n        return getOutput(fileName)\n      }\n    }\n  } as any)\n\n  // Require the TypeScript compiler and configuration.\n  const ts: typeof TS = require(options.compiler)\n  const config = readConfig(options, cwd, ts)\n  const diagnostics = formatDiagnostics(config.errors, cwd, ts, options)\n\n  // Render the configuration errors and exit the script.\n  if (diagnostics.length) {\n    throw new TSError(diagnostics)\n  }\n\n  // Add all files into the file hash.\n  for (const fileName of config.fileNames) {\n    project.files[fileName] = true\n  }\n\n  /**\n   * Create the basic required function using transpile mode.\n   */\n  let getOutput = function (fileName: string) {\n    const contents = options.getFile(fileName)\n    const { outputText, diagnostics } = ts.transpileModule(contents, {\n      compilerOptions: config.options,\n      fileName,\n      reportDiagnostics: true\n    })\n\n    const diagnosticList = diagnostics ? formatDiagnostics(diagnostics, cwd, ts, options) : []\n\n    if (diagnosticList.length) {\n      throw new TSError(diagnosticList)\n    }\n\n    return outputText\n  }\n\n  let compile = function (fileName: string) {\n    return getOutput(fileName)\n  }\n\n  let getTypeInfo = function (fileName: string, position: number): TypeInfo {\n    throw new TypeError(`No type information available under \"--fast\" mode`)\n  }\n\n  /**\n   * Use language services when the fast option is disabled.\n   */\n  if (!options.fast) {\n    const serviceHost = {\n      getScriptFileNames: () => Object.keys(project.files),\n      getProjectVersion: () => String(project.version),\n      getScriptVersion: (fileName: string) => versionFile(fileName),\n      getScriptSnapshot (fileName: string) {\n        if (!options.getFileExists(fileName)) {\n          return undefined\n        }\n\n        return ts.ScriptSnapshot.fromString(options.getFile(fileName))\n      },\n      getNewLine: () => EOL,\n      getCurrentDirectory: () => cwd,\n      getCompilationSettings: () => config.options,\n      getDefaultLibFileName: (options: any) => ts.getDefaultLibFilePath(config.options)\n    }\n\n    const service = ts.createLanguageService(serviceHost)\n\n    const addAndVersionFile = function (fileName: string) {\n      // Add files to the hash before compilation.\n      project.files[fileName] = true\n\n      const currentVersion = project.versions[fileName]\n      const newVersion = versionFile(fileName)\n\n      // Increment the project version for file changes.\n      if (currentVersion !== newVersion) {\n        project.version++\n      }\n\n      return newVersion\n    }\n\n    const versionFile = function (fileName: string) {\n      const version = options.getVersion(fileName)\n      project.versions[fileName] = version\n      return version\n    }\n\n    getOutput = function (fileName: string) {\n      const output = service.getEmitOutput(fileName)\n\n      // Get the relevant diagnostics - this is 3x faster than `getPreEmitDiagnostics`.\n      const diagnostics = service.getCompilerOptionsDiagnostics()\n        .concat(service.getSyntacticDiagnostics(fileName))\n        .concat(service.getSemanticDiagnostics(fileName))\n\n      const diagnosticList = formatDiagnostics(diagnostics, cwd, ts, options)\n\n      if (output.emitSkipped) {\n        diagnosticList.push(`${relative(cwd, fileName)}: Emit skipped`)\n      }\n\n      if (diagnosticList.length) {\n        throw new TSError(diagnosticList)\n      }\n\n      return output.outputFiles[0].text\n    }\n\n    compile = function (fileName: string) {\n      addAndVersionFile(fileName)\n\n      return getOutput(fileName)\n    }\n\n    getTypeInfo = function (fileName: string, position: number) {\n      addAndVersionFile(fileName)\n\n      const info = service.getQuickInfoAtPosition(fileName, position)\n      const name = ts.displayPartsToString(info ? info.displayParts : [])\n      const comment = ts.displayPartsToString(info ? info.documentation : [])\n\n      return { name, comment }\n    }\n  }\n\n  function loader (m: any, fileName: string) {\n    return m._compile(compile(fileName), fileName)\n  }\n\n  function shouldIgnore (filename: string) {\n    return relative(cwd, filename).split(sep).indexOf('node_modules') > -1\n  }\n\n  function registerExtension (ext: string) {\n    const old = oldHandlers[ext] || oldHandlers['.js'] || require.extensions['.js']\n\n    oldHandlers[ext] = require.extensions[ext]\n\n    require.extensions[ext] = function (m: any, filename: string) {\n      if (shouldIgnore(filename)) {\n        return old(m, filename)\n      }\n\n      return loader(m, filename)\n    }\n  }\n\n  registerExtension('.ts')\n  registerExtension('.tsx')\n\n  if (config.options.allowJs) {\n    registerExtension('.js')\n  }\n\n  return { compile, getTypeInfo }\n}\n\n/**\n * Get the file version using the mod time.\n */\nexport function getVersion (fileName: string): string {\n  return String(statSync(fileName).mtime.getTime())\n}\n\n/**\n * Check if the file exists.\n */\nexport function getFileExists (fileName: string): boolean {\n  try {\n    const stats = statSync(fileName)\n\n    return stats.isFile() || stats.isFIFO()\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Get the file from the file system.\n */\nexport function getFile (fileName: string): string {\n  return readFileSync(fileName, 'utf8')\n}\n\n/**\n * Format an array of diagnostics.\n */\nfunction formatDiagnostics (diagnostics: TS.Diagnostic[], cwd: string, ts: TSCommon, options: Options) {\n  if (options.disableWarnings) {\n    return []\n  }\n\n  return diagnostics\n    .filter(function (diagnostic) {\n      return options.ignoreWarnings.indexOf(diagnostic.code) === -1\n    })\n    .map(function (diagnostic) {\n      return formatDiagnostic(diagnostic, ts, cwd)\n    })\n}\n\n/**\n * Format a diagnostic object into a string.\n */\nfunction formatDiagnostic (diagnostic: TS.Diagnostic, ts: TSCommon, cwd: string): string {\n  const message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n')\n\n  if (diagnostic.file) {\n    const path = relative(cwd, diagnostic.file.fileName)\n    const { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start)\n\n    return `${path} (${line + 1},${character + 1}): ${message} (${diagnostic.code})`\n  }\n\n  return `${message} (${diagnostic.code})`\n}\n\n/**\n * TypeScript diagnostics error.\n */\nexport class TSError extends BaseError {\n\n  name = 'TSError'\n  diagnostics: string[]\n\n  constructor (diagnostics: string[]) {\n    super(`⨯ Unable to compile TypeScript\\n${diagnostics.join('\\n')}`)\n    this.diagnostics = diagnostics\n  }\n\n}\n"]}